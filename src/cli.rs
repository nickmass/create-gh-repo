use clap::{Arg, ArgGroup, App};

pub fn build_cli<'a>(editor: &'a str, username: &'a str, password: &'a str, token: &'a str) -> App<'a,'a> {
    App::new("Create GitHub Repositories")
        .version(crate_version!())
        .author(crate_authors!())
        .about("Allows you to create new repositories on GitHub from the command line")
        .arg(Arg::with_name("username")
             .short("u")
             .long("user")
             .empty_values(false)
             .default_value(username)
             .help("Your GitHub account username"))
        .arg(Arg::with_name("token")
             .short("t")
             .long("token")
             .empty_values(false)
             .requires("username")
             .default_value(token)
             .overrides_with("password")
             .help("A Personal Token for your GitHub account with the 'public_repo' permission"))
        .arg(Arg::with_name("password")
             .short("p")
             .long("password")
             .empty_values(true)
             .requires("username")
             .default_value(password)
             .help("The password to your GitHub account"))
        .group(ArgGroup::with_name("auth")
               .args(&["token", "password"])
               .required(true))
        .arg(Arg::with_name("editor")
             .short("e")
             .long("editor")
             .takes_value(true)
             .help("The command to run to edit the repository manifest")
             .default_value(editor))
        .arg(Arg::with_name("directory")
             .help("Sets an optional target directory for git operations")
             .index(2))
        .arg(Arg::with_name("mode")
             .index(1)
             .possible_values(&["clone", "remotes", "push", "rebase"])
             .default_value("clone")
             .required(true))
        .after_help("NOTES:{n}<username>, <token>, and <password> may alternatively be supplied by setting the GITHUB_USERNAME, GITHUB_TOKEN, or GITHUB_PASSWORD environment variables")
}
